/* tslint:disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  createdAt: GQLISO8601DateTime;
  updatedAt: GQLISO8601DateTime;

  /**
   * Find user by ID
   */
  user?: GQLUser;

  /**
   * All Users
   */
  users?: Array<GQLUser>;
}

/**
 * An ISO 8601-encoded datetime
 */
export type GQLISO8601DateTime = any;

export interface GQLUser {
  createdAt: GQLISO8601DateTime;
  email?: string;
  id: string;
  microposts?: Array<GQLMicropost>;
  name?: string;
  updatedAt: GQLISO8601DateTime;
}

export interface GQLMicropost {
  content?: string;
  createdAt: GQLISO8601DateTime;
  id: string;
  updatedAt: GQLISO8601DateTime;
  user?: Array<GQLUser>;
}

export interface GQLMutation {
  createUser: GQLUser;
  createdAt: GQLISO8601DateTime;

  /**
   * An example field added by the generator
   */
  testField: string;
  updatedAt: GQLISO8601DateTime;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  ISO8601DateTime?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  Micropost?: GQLMicropostTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  createdAt?: QueryToCreatedAtResolver<TParent>;
  updatedAt?: QueryToUpdatedAtResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
}

export interface QueryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  id: string;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  createdAt?: UserToCreatedAtResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  microposts?: UserToMicropostsResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToMicropostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMicropostTypeResolver<TParent = any> {
  content?: MicropostToContentResolver<TParent>;
  createdAt?: MicropostToCreatedAtResolver<TParent>;
  id?: MicropostToIdResolver<TParent>;
  updatedAt?: MicropostToUpdatedAtResolver<TParent>;
  user?: MicropostToUserResolver<TParent>;
}

export interface MicropostToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicropostToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicropostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicropostToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MicropostToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createUser?: MutationToCreateUserResolver<TParent>;
  createdAt?: MutationToCreatedAtResolver<TParent>;
  testField?: MutationToTestFieldResolver<TParent>;
  updatedAt?: MutationToUpdatedAtResolver<TParent>;
}

export interface MutationToCreateUserArgs {
  name: string;
  email: string;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateUserArgs,
    context: any,
    info: GraphQLResolveInfo,
  ): TResult;
}

export interface MutationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTestFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
